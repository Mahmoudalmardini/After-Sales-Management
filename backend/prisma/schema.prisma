// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Note: SQLite doesn't support enums, so we use String fields with constraints

model Department {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  managerId   Int?     @unique
  createdAt   DateTime @default(now())
  
  // Relations
  manager     User?     @relation("DepartmentManager", fields: [managerId], references: [id])
  users       User[]    @relation("UserDepartment")
  products    Product[]
  requests    Request[]
  spareParts  SparePart[]

  @@map("departments")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  phone        String?
  role         String
  departmentId Int?
  isActive     Boolean  @default(true)
  preferredCurrency String @default("SYP")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department               Department?           @relation("UserDepartment", fields: [departmentId], references: [id])
  managedDepartment        Department?           @relation("DepartmentManager")
  receivedRequests         Request[]             @relation("ReceivedBy")
  assignedRequests         Request[]             @relation("AssignedTechnician")
  activities               RequestActivity[]
  costsAdded               RequestCost[]
  notifications            Notification[]
  createdNotifications     Notification[]        @relation("NotificationCreator")
  requestPartsAdded        RequestPart[]
  createdCustomStatuses    CustomRequestStatus[]
  sparePartHistoryChanges  SparePartHistory[]
  technicianReports        TechnicianReport[]    @relation("TechnicianReports")
  approvedReports          TechnicianReport[]    @relation("ApprovedReports")

  @@map("users")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  email     String?
  address   String
  city      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  requests Request[]

  @@map("customers")
}

model Product {
  id             Int    @id @default(autoincrement())
  name           String
  model          String
  serialNumber   String? @unique
  category       String
  departmentId   Int
  warrantyMonths Int    @default(12)
  createdAt      DateTime @default(now())

  // Relations
  department Department @relation(fields: [departmentId], references: [id])
  requests   Request[]

  @@map("products")
}

model Request {
  id                   Int               @id @default(autoincrement())
  requestNumber        String            @unique
  customerId           Int
  productId            Int?
  departmentId         Int
  assignedTechnicianId Int?
  receivedById         Int

  // Request details
  issueDescription     String
  executionMethod      String
  warrantyStatus       String
  purchaseDate         DateTime?

  // Status management
  status               String            @default("NEW")
  priority             String            @default("NORMAL")

  // SLA tracking
  createdAt            DateTime          @default(now())
  assignedAt           DateTime?
  startedAt            DateTime?
  completedAt          DateTime?
  closedAt             DateTime?
  slaDueDate           DateTime?
  isOverdue            Boolean           @default(false)

  // Final details
  finalNotes           String?
  customerSatisfaction Int?

  updatedAt            DateTime          @updatedAt

  // Relations
  customer             Customer            @relation(fields: [customerId], references: [id])
  product              Product?            @relation(fields: [productId], references: [id])
  department           Department          @relation(fields: [departmentId], references: [id])
  assignedTechnician   User?               @relation("AssignedTechnician", fields: [assignedTechnicianId], references: [id])
  receivedBy           User                @relation("ReceivedBy", fields: [receivedById], references: [id])
  activities           RequestActivity[]
  costs                RequestCost[]
  notifications        Notification[]
  requestParts         RequestPart[]
  technicianReports    TechnicianReport[]

  @@map("requests")
}

model RequestActivity {
  id           Int          @id @default(autoincrement())
  requestId    Int
  userId       Int
  activityType String
  description  String
  oldValue     String?
  newValue     String?
  createdAt    DateTime     @default(now())

  // Relations
  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])

  @@map("request_activities")
}

model RequestCost {
  id          Int      @id @default(autoincrement())
  requestId   Int
  description String
  amount      Float
  costType    String
  currency    String   @default("SYP")
  addedById   Int
  createdAt   DateTime @default(now())
  requestPartId Int?

  // Relations
  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  addedBy User    @relation(fields: [addedById], references: [id])
  // requestPart RequestPart? @relation(fields: [requestPartId], references: [id])

  @@map("request_costs")
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  requestId Int?
  title     String
  message   String
  type      String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Who created/sent this notification (optional, used for read receipts)
  createdById Int?

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  request Request? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  createdBy User?  @relation("NotificationCreator", fields: [createdById], references: [id])

  @@map("notifications")
}

model SparePart {
  id            Int      @id @default(autoincrement())
  name          String
  partNumber    String   @unique  // Alphanumeric identifier (e.g., "EAU20204EX88")
  presentPieces Int      @default(0)  // Number of present pieces (numeric)
  category      String
  quantity      Int      @default(0)
  minQuantity   Int      @default(5)
  unitPrice     Float    @default(0.0)
  currency      String   @default("SYP")
  supplier      String?
  location      String?
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Optional owning department for the part
  departmentId Int?

  // Relations
  requestParts RequestPart[]
  department   Department?        @relation(fields: [departmentId], references: [id])
  history      SparePartHistory[]

  @@map("spare_parts")
}

model RequestPart {
  id           Int      @id @default(autoincrement())
  requestId    Int
  sparePartId  Int
  quantityUsed Int
  unitPrice    Float
  totalCost    Float
  addedById    Int
  createdAt    DateTime @default(now())

  // Relations
  request   Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  sparePart SparePart @relation(fields: [sparePartId], references: [id])
  addedBy   User      @relation(fields: [addedById], references: [id])
  // cost      RequestCost?

  @@map("request_parts")
}

model CustomRequestStatus {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  displayName String
  description String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0) // For ordering in dropdowns
  createdById Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy User @relation(fields: [createdById], references: [id])

  @@map("custom_request_statuses")
}

model SparePartHistory {
  id             Int      @id @default(autoincrement())
  sparePartId    Int
  changedById    Int
  changeType     String   // 'CREATED', 'UPDATED', 'QUANTITY_CHANGED', 'USED_IN_REQUEST'
  fieldChanged   String?  // Which field was changed (if applicable)
  oldValue       String?  // Old value (as string)
  newValue       String?  // New value (as string)
  quantityChange Int?     // For quantity changes (+/-)
  description    String?  // Optional description of the change
  requestId      Int?     // If related to a request
  createdAt      DateTime @default(now())

  // Relations
  sparePart SparePart @relation(fields: [sparePartId], references: [id])
  changedBy User      @relation(fields: [changedById], references: [id])

  @@map("spare_part_history")
}

model TechnicianReport {
  id               Int      @id @default(autoincrement())
  requestId        Int
  technicianId     Int
  reportContent    String   // Main report text
  currentStatus    String?  // New status selected by technician
  partsUsed        String?  // JSON string of parts used
  sendToSupervisor Boolean  @default(false)
  sendToAdmin      Boolean  @default(false)
  isApproved       Boolean? // null = pending, true = approved, false = rejected
  approvedById     Int?
  approvalComment  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  request    Request @relation(fields: [requestId], references: [id])
  technician User    @relation("TechnicianReports", fields: [technicianId], references: [id])
  approvedBy User?   @relation("ApprovedReports", fields: [approvedById], references: [id])

  @@map("technician_reports")
}