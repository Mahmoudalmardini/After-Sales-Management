version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: after-sales-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: after_sales_db
      POSTGRES_USER: after_sales_user
      POSTGRES_PASSWORD: after_sales_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - after-sales-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U after_sales_user -d after_sales_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: after-sales-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://after_sales_user:after_sales_password@postgres:5432/after_sales_db?schema=public
      JWT_SECRET: your-super-secret-jwt-key-change-in-production-2024
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-2024
      CORS_ORIGIN: http://localhost:3000
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_FROM: no-reply@company.com
      SLA_UNDER_WARRANTY: 168
      SLA_OUT_OF_WARRANTY: 240
      SLA_ONSITE_BUFFER: 48
      MAX_FILE_SIZE: 5242880
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      LOG_LEVEL: info
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - after-sales-network
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:3001/api
    container_name: after-sales-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - after-sales-network

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: after-sales-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - after-sales-network
    profiles:
      - production

volumes:
  postgres_data:

networks:
  after-sales-network:
    driver: bridge
